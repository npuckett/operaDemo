/* autogenerated by Processing revision 1292 on 2023-07-12 */
import processing.core.*;
import processing.data.*;
import processing.event.*;
import processing.opengl.*;

import processing.video.*;
import ch.bildspur.artnet.*;
import controlP5.*;

import java.util.HashMap;
import java.util.ArrayList;
import java.io.File;
import java.io.BufferedReader;
import java.io.PrintWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;

public class artNet_demoV3 extends PApplet {

// Import the video library







String pathToMovie1 = "glitch2Badge.mov";
String pathToMovie2 = "loading.mov";
String pathToMovie3 = "redChase.mov";
String pathToMovie4 = "futureColour.mov";

Universe dancers;
String dancerIPs[] = {"192.168.1.161"};

ArtNetDevice primus1;
ArtNetDevice primus2;
ArtNetDevice primus3;
ArtNetDevice primus4;
ArtNetDevice primus5;

Universe alex;
String alexIPs[] = {"192.168.1.162"};

Universe robotHelena;
String robotHelenaIPs[] = {"10.0.0.131"};

Universe chase;

//create an arraylist of universes
ArrayList<Universe> universes = new ArrayList<Universe>();

Universe future;
float mScale = 0.44f;

int vidPickNumber = 0;
public void setup() 
{
  /* size commented out by preprocessor */;




dancers = new Universe(this, 10,0,pathToMovie1,1,104,true,true,72,dancerIPs,0.2f);
alex = new Universe(this, 325,0, pathToMovie2,2,104,true,true,72,alexIPs,1.0f);
future = new Universe(this, 625,0, pathToMovie3,3,104,true,true,72,alexIPs,0.5f);
chase = new Universe(this, 925,0, pathToMovie4,4,104,true,true,72,alexIPs,3.2f);


//robotHelena = new Universe(this,800,0 ,pathToMovie3,3,144,false,true,144,robotHelenaIPs);

//add the first two universes to the arraylist
universes.add(dancers);
universes.add(alex);
universes.add(future);
universes.add(chase);

primus1 = new ArtNetDevice(this,1,dancerIPs[0],10,400);
primus2 = new ArtNetDevice(this,2,alexIPs[0],10,500);
primus3 = new ArtNetDevice(this,2,"192.168.1.163",10,600);
primus4 = new ArtNetDevice(this,2,"192.168.1.133",10,700);
primus5 = new ArtNetDevice(this,2,"192.168.1.202",10,800);
}

public void draw() 
{
  background(0);
  dancers.show();
  alex.show();
  future.show();
  chase.show();
 // robotHelena.show();
  image(dancers.display,dancers.displayX,0,640*mScale,480*mScale);
  image(alex.display,alex.displayX,0,640*mScale,480*mScale);
  image(future.display,future.displayX,0,640*mScale,480*mScale);
  image(chase.display,chase.displayX,0,640*mScale,480*mScale);
 // image(robotHelena.display,robotHelena.displayX,0,640*0.5,480*0.5);

  primus1.sendColorData(universes.get(primus1.readNumber));
  primus2.sendColorData(universes.get(primus2.readNumber));
  primus3.sendColorData(universes.get(primus3.readNumber));
  primus4.sendColorData(universes.get(primus4.readNumber));
  primus5.sendColorData(universes.get(primus5.readNumber));

  //printArray(universes.get(0).colorData);

}

public void movieEvent(Movie m) 
{
  m.read();
}
//create new class called ArtNetDevice

class ArtNetDevice
{
ArtNetClient artnet;
int uNumber;
String deviceIP;

int readNumber = 0;

ControlP5 cp5;
int xpos;
int ypos;

ArtNetDevice(PApplet p, int uNumber, String deviceIP, int xpos, int ypos)
{
this.uNumber = uNumber;
this.deviceIP = deviceIP;
artnet = new ArtNetClient(null);
artnet.start();


this.xpos = xpos;
this.ypos = ypos;

int maxunis = universes.size()-1;

cp5 = new ControlP5(p);
cp5.addSlider("colorPick")
.setPosition(xpos,ypos)
.setSize(70,20)
.setRange(0,maxunis)
.setDecimalPrecision(0)
.setNumberOfTickMarks(maxunis+1)
.plugTo(this,"readNumberSlide");

}
///set it to only use integers


public void readNumberSlide(int theNumber)
{
    this.readNumber = theNumber;
}



public void sendColorData(Universe readUni)
{
//create 20 white text that says "device " + uNumber + "colorinput " +readNumber" formatted on one line
// fill white
//textsize 20
fill(255);
textSize(20);
text("device: " + uNumber + " colorinput " +readNumber, this.xpos, this.ypos-40);
text("IP: " + this.deviceIP, this.xpos, this.ypos-20);




    byte[] cd = readUni.colorData;
    artnet.unicastDmx(this.deviceIP,this.uNumber,0,cd);

}
























}
class NeoPixel
{

int number;
int x;
int y;
int currentCol = color(0,0,0);
int cr;
int cg;
int cb;

float radius;

NeoPixel(int _x, int _y, float _radius, int _num)
{
number = _num;
x = _x;
y = _y;
radius = _radius;


}

      public int[] show(PGraphics pg, Movie ca)
      {
        int[] col = new int[3];
        int loc = x + y*ca.width;
        ca.loadPixels();

        try
            {
            currentCol = ca.pixels[loc];

            //bit shift to get r g b
            cr =  currentCol >> 16 & 0xFF;
            cg = currentCol >> 8 & 0xFF;
            cb = currentCol & 0xFF;
            }
            catch (ArrayIndexOutOfBoundsException e)
            {
            
            }

    //println(number+" : "+cr+"  |  "+cg+"  |  "+cb);




          //text(""+number+" r:"+cr+" g:"+cg+" b:"+cb,x,y);    
          pg.fill(currentCol);
          pg.stroke(255);
          pg.strokeWeight(1);
          pg.ellipse(x, y, radius, radius);

          pg.fill(255);
          pg.textAlign(CENTER, CENTER);
          pg.textSize(12);
          pg.text("" + number, x, y);

          col[0] = cr;
          col[1] = cg;
          col[2] = cb;

          return col;
      }







}
class Universe
{
ControlP5 cp5;
////ArtNetClient artnet;
String ips[];
Movie controlAnimation;
int uNumber;
int totalLEDs;
boolean badge;
boolean collar;
PGraphics display;
float displayScale = 1.0f;
float displayX =0;
float displayY =0;
byte colorData[];
ArrayList<NeoPixel> pixelList = new ArrayList<NeoPixel>();
int collarLength;
float playbackSpeed = 1.0f;
String animationPaths[];


    Universe(PApplet p, float _displayX, float _displayY, String animationPath, int _uNumber, int _totalLEDs, boolean _badge, boolean _collar, int _collarLength, String _ips[], float defSpeed)
    {
       displayX = _displayX;    
         displayY = _displayY;
         playbackSpeed = defSpeed;
       
        //load the animation
        controlAnimation = new Movie(p, animationPath);
        controlAnimation.loop();
        controlAnimation.speed(playbackSpeed);

        uNumber = _uNumber;
        totalLEDs = _totalLEDs;
        badge = _badge;
        collar = _collar;
        ips = _ips;
        
        display = createGraphics(640, 480);
        colorData = new byte[totalLEDs * 3];
        collarLength = _collarLength;


       //// artnet = new ArtNetClient(null);
       //// artnet.start();

        //variable for numbering the LEDs
        int index = 0;

        if(badge)
        {
            int ledGrid1_xDim = 8;
            int ledGrid1_yDim = 4;
            int ledGrid1_xPos = 100;
            int ledGrid1_yPos = 100;
            float ledGrid1_pixelRadius = 30;
            int ledGrid1_brightness = 100;
            int ledGrid1_spacing = 60;
            

            //create led grid on screen
            for(int y =0;y<ledGrid1_yDim;y++)
            {
            for (int x = 0;x<ledGrid1_xDim;x++)
            {
                int localX = ledGrid1_xPos+ledGrid1_spacing*x;
                int localY = ledGrid1_yPos+ledGrid1_spacing*y;
                pixelList.add(new NeoPixel(localX,localY,ledGrid1_pixelRadius,index));
                index++;
            }

            }
        }
        if(collar)
        {
                
                float ledStrip1_pixelRadius = 20;
                float ledStrip1_screenMargin = 20;

            for (int i= 0;i<collarLength;i++)
            {
                int localX = round(map(i,0,(collarLength-1),ledStrip1_screenMargin,display.width-ledStrip1_screenMargin));
                int localY = 400;
                pixelList.add(new NeoPixel(localX,localY,ledStrip1_pixelRadius, index));
                index++;
                //println(display.width);
            }

        }



    cp5 = new ControlP5(p);
    cp5.addSlider("speed")
    .setPosition(displayX+10, displayY+220)
    .setSize(230, 20)
    .setRange(0.1f, 5.0f) // minimum and maximum values for the slider
    .setValue(defSpeed) // default value
    .plugTo(this, "setPlaybackSpeed");



    }
  public void setPlaybackSpeed(float speed) {
    this.playbackSpeed = speed;
  }


public void show()
{
    //set playback speed
    controlAnimation.speed(playbackSpeed);

    if(controlAnimation.available())
    {
        //println("available");
        controlAnimation.read();
    }
    //controlAnimation.loadPixels();
        display.beginDraw();
        //display.image(controlAnimation, displayX, displayY, display.width * displayScale, display.height * displayScale);
        for (NeoPixel p : pixelList)
        {
            int[] tempColor =  p.show(display, controlAnimation);
            colorData[p.number*3] = (byte)tempColor[0];
            colorData[p.number*3+1] = (byte)tempColor[1];
            colorData[p.number*3+2] = (byte)tempColor[2];
        }
        
        
        display.endDraw();

        /*
        for (String ip : ips)
        {
            
            artnet.unicastDmx(ip,uNumber,0,colorData);
        }
        */    
}













}


  public void settings() { size(1280, 960); }

  static public void main(String[] passedArgs) {
    String[] appletArgs = new String[] { "artNet_demoV3" };
    if (passedArgs != null) {
      PApplet.main(concat(appletArgs, passedArgs));
    } else {
      PApplet.main(appletArgs);
    }
  }
}
